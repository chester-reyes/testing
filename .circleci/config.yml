version: 2

jobs:
 build:
   machine: true
   environment: &environment_variables
     DOCKER_REPO: hautelook
     DOCKER_CACHE_FROM: latest
     PROJECTS_TO_BUILD: /tmp/projects.to.build
     COMMITTED_FILES: /tmp/committed.files
   steps:
      - type: checkout

      - type: shell
        name: "Determine Projects to Build."
        command: |
          COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | awk -F'/' '{print $NF}')
          if [[ `echo ${COMMIT_RANGE} | grep "\.\."` != "" ]]; then
            echo "Commit Range: ${COMMIT_RANGE}"
            git diff $COMMIT_RANGE --name-status | egrep "^[M|A|D]\s+" | sort | uniq > ${COMMITTED_FILES}
          else
            echo "Commit ID: ${COMMIT_RANGE}"
            git show $COMMIT_RANGE --name-status | egrep "^[M|A|D]\s+" | sort | uniq > ${COMMITTED_FILES}
          fi
          echo "Grabbing Project Folder Names."
          cat ${COMMITTED_FILES} | awk '{print $2}' | awk -F"/" '{print $1"/"$2}' > ${PROJECTS_TO_BUILD}

      - type: shell
        name: "Build Projects"
        command: |
          if [[ $(wc -l ${PROJECTS_TO_BUILD} | awk '{print $1}') > 0 ]]; then
             cat ${PROJECTS_TO_BUILD} | while read project;
             do
               if [ -e "${project}/Dockerfile" ]; then
                  dockerImage=$(echo $project | tr '[:upper:]' '[:lower:]' | awk -F'/' '{print $2}')
                  echo "Building ${project}..."
                  docker login --username "${DOCKER_USERNAME?}" --password "${DOCKER_PASSWORD?}"
                  docker pull "${DOCKER_REPO?}/${dockerImage}:${DOCKER_CACHE_FROM?}" || true
                  docker build \
                     --cache-from "${DOCKER_REPO?}/${dockerImage}:${DOCKER_CACHE_FROM?}" \
                     --file "${project}/Dockerfile" \
                     --tag "${DOCKER_REPO?}/${dockerImage}:latest" \
                     --tag "${DOCKER_REPO?}/${dockerImage}:${CIRCLE_SHA1?}" \
                     .

                  echo "Pushing Build Artifact to Docker Repo."
                  [ ! "${CIRCLE_BRANCH?}" = "master" ] \
                    && echo "Skipping because this is a pull request" \
                    || docker push "${DOCKER_REPO?}/${dockerImage}:${CIRCLE_SHA1?}"

                  echo "Updating latest."
                  [ ! "${CIRCLE_BRANCH?}" = "master" ] \
                    && echo "Skipping because this is not a merge into master" \
                    || docker push "${DOCKER_REPO?}/${dockerImage}:latest"
                  echo "Build execution complete.\n"
               else
                  echo "Skipping build for ${project}. No dockerfile found."
               fi
             done
          else
             echo "There are no projects to build."
          fi

      - type: shell
        name: "Remove temporary files"
        command: |
          rm -f ${PROJECTS_TO_BUILD}
          rm -f ${OMMITTED_FILES}
