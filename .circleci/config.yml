version: 2

jobs:
 build:
   machine: true

   environment: &environment_variables
     HOME_PROJECT: /home/circleci/project
     DOCKER_CACHE_FROM: latest
     PROJECTS_TO_BUILD: /tmp/projects.to.build
     COMMITTED_FILES: /tmp/committed.files
     TERRAFORM_VERSION: 0.10.8

   steps:
      - type: checkout

      - type: shell
        name: "Determine Projects to Build."
        command: |
          touch ${PROJECTS_TO_BUILD}
          COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | awk -F'/' '{print $NF}')
          if [[ `echo ${COMMIT_RANGE} | grep "\.\."` != "" ]]; then
            echo "Commit Range: ${COMMIT_RANGE}"
            git diff $COMMIT_RANGE --name-status | egrep "^[M|A|D]\s+" | sort | uniq > ${COMMITTED_FILES}
          else
            echo "Commit ID: ${COMMIT_RANGE}"
            git show $COMMIT_RANGE --name-status | egrep "^[M|A|D]\s+" | sort | uniq > ${COMMITTED_FILES}
            git --version
          fi
          echo "Grabbing Project Folder Names."
          cat ${COMMITTED_FILES} | awk '{print $2}' | awk -F"/" '{print $1"/"$2}' | sort | uniq | while read line;
          do
            if [ ! -f ${line} ]; then
              echo ${line} >> ${PROJECTS_TO_BUILD} 
            fi
          done

      - type: shell
        name: "Build Projects"
        command: |
          if [[ $(wc -l ${PROJECTS_TO_BUILD} | awk '{print $1}') > 0 ]]; then
             echo "Processing contents of temporary file..."
             cat ${PROJECTS_TO_BUILD} | while read project;
             do
               dockerImage=$(echo $project | tr '[:upper:]' '[:lower:]' | awk -F'/' '{print $2}')
               echo "- Changing to Project Directory: ${dockerImage}"
               cd ${HOME_PROJECT}/${project} 
                 
               if [ -e "./Dockerfile" ]; then
                 echo "  - Build Initiated."
                 dockerLogin=$(docker login --username "${DOCKER_USERNAME?}" --password "${DOCKER_PASSWORD?}" 2>&1 | grep -v "WARNING")
                 if [ "${dockerLogin}" != "Login Succeeded" ]; then
                   echo "    - Docker Login Failed: ERROR - [${dockerLogin}]"
                   exit 1
                 else 
                   echo "    - Docker ${dockerLogin}"
                 fi

                 dockerPull=$(docker pull "hautelook/${CIRCLE_PROJECT_REPONAME}-${dockerImage}:${DOCKER_CACHE_FROM?}" 2>&1) 
                 echo "    - Docker Pull Status: ${dockerPull}"

                 docker build \
                   --cache-from "hautelook/${CIRCLE_PROJECT_REPONAME}-${dockerImage}:${DOCKER_CACHE_FROM?}" \
                   --file "./Dockerfile" \
                   --tag "hautelook/${CIRCLE_PROJECT_REPONAME}-${dockerImage}:latest" \
                   --tag "hautelook/${CIRCLE_PROJECT_REPONAME}-${dockerImage}:${CIRCLE_SHA1?}" \
                   . 1>/tmp/${dockerImage}.log 2>/tmp/${dockerImage}.error
                    
                 if [[ $(wc -l /tmp/${dockerImage}.error | awk '{print $1}') > 0 ]]; then
                   echo "    - Docker Build for ${dockerImage} failed."
                   exit 1
                 else 
                   echo "    - Pushing Build Artifact to Docker Repo."
                   [ ! "${CIRCLE_BRANCH?}" = "master" ] \
                     && echo "     - Skipping because this is a pull request" \
                     || docker push "hautelook/${CIRCLE_PROJECT_REPONAME}-${dockerImage}:${CIRCLE_SHA1?}"
                  
                   echo "    - Updating latest."
                   [ ! "${CIRCLE_BRANCH?}" = "master" ] \
                     && echo "     - Skipping because this is not a merge into master" \
                     || docker push "hautelook/${CIRCLE_PROJECT_REPONAME}-${dockerImage}:latest"
                 fi 
                   
                 echo "  - Build execution complete."; echo 
               else
                 echo "SKIPPING: No dockerfile found for ${project}."
               fi
             done
          else
             echo "There are no projects to build."
          fi

      - type: shell
        name: "Remove temporary files"
        command: |
          rm -f ${PROJECTS_TO_BUILD}
          rm -f ${OMMITTED_FILES}
