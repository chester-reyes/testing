jobs:
 build:
   machine: true
   environment: &environment_variables
     DOCKER_CACHE_FROM: latest
     PROJECTS_TO_BUILD: /tmp/projects.to.build
   steps:
      - type: checkout
      - type: shell
        name: "Determine which Projects need to be built"
        command: |
          COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')
          echo "Commit range: " $COMMIT_RANGE
          touch ${PROJECTS_TO_BUILD}
          git diff $COMMIT_RANGE --name-status | cut -f2 | awk -F'/' '{print $1}' | sort | uniq > ${PROJECTS_TO_BUILD}
      - type: shell
        name: "Build Projects"
        command: |
          if [[ $(wc -l ${PROJECTS_TO_BUILD} | awk '{print $1}') > 0 ]]; then
           cat ${PROJECTS_TO_BUILD} | while read project;
           do
            dockerRepo=$(echo $project | tr '[:upper:]' '[:lower:]')
            if [[ ${project} != ".circleci" ]]; then
             echo "Building ${project}..."
             docker login --username "${DOCKER_USERNAME?}" --password "${DOCKER_PASSWORD?}"
             docker pull "${DOCKER_USERNAME?}/${dockerRepo}:${DOCKER_CACHE_FROM?}" || true
             docker build \
                --cache-from "${DOCKER_USERNAME?}/${project}:${DOCKER_CACHE_FROM?}" \
                --file "${project}/Dockerfile" \
                --tag "${DOCKER_USERNAME?}/${dockerRepo}:latest" \
                --tag "${DOCKER_USERNAME?}/${dockerRepo}:${CIRCLE_SHA1?}" \
                .
             
             echo "Pusing Build Artifact to Docker Repo."
             [[ "${CIRCLE_BRANCH?}" =~ ^pull/ ]] \
             && echo "Skipping because this is a pull request" \
             || docker push "${DOCKER_USERNAME?}/${project}:${CIRCLE_SHA1?}"
             
             echo "Updating latest."
             [ ! "${CIRCLE_BRANCH?}" = "master" ] \
             && echo "Skipping because this is not a merge into master" \
             || docker push "${DOCKER_USERNAME?}/${project}:latest"
             
             echo "Build execution complete.\n"
            fi 
           done
          else 
           echo "There are no projects to build."
          fi 
      - type: shell
        name: "Remove temporary files"
        command: |
          rm -f /tmp/${PROJECTS_TO_BUILD}

